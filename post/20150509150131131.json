{"id":"20150509150131131","content":"Code example extracted from Stack Overflow:\r\n\r\nboolean running = true;\r\nBufferedInputStream reader = new BufferedInputStream( \r\n    new FileInputStream( \"out.txt\" ) );\r\n\r\npublic void run() {\r\n    while( running ) {\r\n        if( reader.available() > 0 ) {\r\n            System.out.print( (char)reader.read() );\r\n        }\r\n        else {\r\n            try {\r\n                sleep( 500 );\r\n            }\r\n            catch( InterruptedException ex )\r\n            {\r\n                running = false;\r\n            }\r\n        }\r\n    }\r\n}\r\nRelated APIs:\r\nThe answer uses 5 API classes, you can use the following links to see more code examples.\r\n\r\n- java.nio.ByteBuffer\r\n- java.nio.channels.FileChannel\r\n- java.lang.System\r\n- java.io.BufferedInputStream\r\n- java.io.FileInputStream\r\nIf you need more contextual information, you can go to the original post. This question was asked by Anthony Cramp. You can go to his\/her website. The accepted answer is provided by Joseph Gordon. Here is his\/her website.","author":"Java Code","title":" Use Java to read from a file that is actively being written","toapprove":[],"comments":[]}